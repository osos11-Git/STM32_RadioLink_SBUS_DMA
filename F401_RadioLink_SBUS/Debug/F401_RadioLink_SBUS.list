
F401_RadioLink_SBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002944  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002af8  08002af8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002af8  08002af8  00012af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b00  08002b00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b00  08002b00  00012b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b04  08002b04  00012b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08002b14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002b14  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009add  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001901  00000000  00000000  00029b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  0002b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  0002bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001559e  00000000  00000000  0002c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098c6  00000000  00000000  00041706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008400c  00000000  00000000  0004afcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cefd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a8c  00000000  00000000  000cf02c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002ac0 	.word	0x08002ac0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002ac0 	.word	0x08002ac0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004d2:	2300      	movs	r3, #0
 80004d4:	607b      	str	r3, [r7, #4]
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <MX_DMA_Init+0x3c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	4a0b      	ldr	r2, [pc, #44]	; (8000508 <MX_DMA_Init+0x3c>)
 80004dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e0:	6313      	str	r3, [r2, #48]	; 0x30
 80004e2:	4b09      	ldr	r3, [pc, #36]	; (8000508 <MX_DMA_Init+0x3c>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	2010      	movs	r0, #16
 80004f4:	f000 fcc1 	bl	8000e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80004f8:	2010      	movs	r0, #16
 80004fa:	f000 fcda 	bl	8000eb2 <HAL_NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023800 	.word	0x40023800

0800050c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_GPIO_Init+0x68>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <MX_GPIO_Init+0x68>)
 800051c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_GPIO_Init+0x68>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_GPIO_Init+0x68>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <MX_GPIO_Init+0x68>)
 8000538:	f043 0301 	orr.w	r3, r3, #1
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <MX_GPIO_Init+0x68>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_GPIO_Init+0x68>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <MX_GPIO_Init+0x68>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_GPIO_Init+0x68>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40023800 	.word	0x40023800

08000578 <HAL_UART_RxCpltCallback>:
uint16_t CH[18];
int lenght=0;
uint16_t USB_Send_Data[]={0};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	if (buf[0] == 0x0F) {
 8000580:	4b94      	ldr	r3, [pc, #592]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	f040 8158 	bne.w	800083a <HAL_UART_RxCpltCallback+0x2c2>
		CH[0] = (buf[1] >> 0 | (buf[2] << 8)) & 0x07FF;
 800058a:	4b92      	ldr	r3, [pc, #584]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	b21a      	sxth	r2, r3
 8000590:	4b90      	ldr	r3, [pc, #576]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	021b      	lsls	r3, r3, #8
 8000596:	b21b      	sxth	r3, r3
 8000598:	4313      	orrs	r3, r2
 800059a:	b21b      	sxth	r3, r3
 800059c:	b29b      	uxth	r3, r3
 800059e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b8c      	ldr	r3, [pc, #560]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 80005a6:	801a      	strh	r2, [r3, #0]
		CH[1] = (buf[2] >> 3 | (buf[3] << 5)) & 0x07FF;
 80005a8:	4b8a      	ldr	r3, [pc, #552]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80005aa:	789b      	ldrb	r3, [r3, #2]
 80005ac:	08db      	lsrs	r3, r3, #3
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	b21a      	sxth	r2, r3
 80005b2:	4b88      	ldr	r3, [pc, #544]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80005b4:	78db      	ldrb	r3, [r3, #3]
 80005b6:	015b      	lsls	r3, r3, #5
 80005b8:	b21b      	sxth	r3, r3
 80005ba:	4313      	orrs	r3, r2
 80005bc:	b21b      	sxth	r3, r3
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	4b84      	ldr	r3, [pc, #528]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 80005c8:	805a      	strh	r2, [r3, #2]
		CH[2] = (buf[3] >> 6 | (buf[4] << 2) | buf[5] << 10) & 0x07FF;
 80005ca:	4b82      	ldr	r3, [pc, #520]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80005cc:	78db      	ldrb	r3, [r3, #3]
 80005ce:	099b      	lsrs	r3, r3, #6
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	b21a      	sxth	r2, r3
 80005d4:	4b7f      	ldr	r3, [pc, #508]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	b21b      	sxth	r3, r3
 80005dc:	4313      	orrs	r3, r2
 80005de:	b21a      	sxth	r2, r3
 80005e0:	4b7c      	ldr	r3, [pc, #496]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	029b      	lsls	r3, r3, #10
 80005e6:	b21b      	sxth	r3, r3
 80005e8:	4313      	orrs	r3, r2
 80005ea:	b21b      	sxth	r3, r3
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b78      	ldr	r3, [pc, #480]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 80005f6:	809a      	strh	r2, [r3, #4]
		CH[3] = (buf[5] >> 1 | (buf[6] << 7)) & 0x07FF;
 80005f8:	4b76      	ldr	r3, [pc, #472]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80005fa:	795b      	ldrb	r3, [r3, #5]
 80005fc:	085b      	lsrs	r3, r3, #1
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	b21a      	sxth	r2, r3
 8000602:	4b74      	ldr	r3, [pc, #464]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000604:	799b      	ldrb	r3, [r3, #6]
 8000606:	01db      	lsls	r3, r3, #7
 8000608:	b21b      	sxth	r3, r3
 800060a:	4313      	orrs	r3, r2
 800060c:	b21b      	sxth	r3, r3
 800060e:	b29b      	uxth	r3, r3
 8000610:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b70      	ldr	r3, [pc, #448]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 8000618:	80da      	strh	r2, [r3, #6]
		CH[4] = (buf[6] >> 4 | (buf[7] << 4)) & 0x07FF;
 800061a:	4b6e      	ldr	r3, [pc, #440]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	091b      	lsrs	r3, r3, #4
 8000620:	b2db      	uxtb	r3, r3
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b6b      	ldr	r3, [pc, #428]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000626:	79db      	ldrb	r3, [r3, #7]
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	b21b      	sxth	r3, r3
 800062c:	4313      	orrs	r3, r2
 800062e:	b21b      	sxth	r3, r3
 8000630:	b29b      	uxth	r3, r3
 8000632:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b67      	ldr	r3, [pc, #412]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 800063a:	811a      	strh	r2, [r3, #8]
		CH[5] = (buf[7] >> 7 | (buf[8] << 1) | buf[9] << 9) & 0x07FF;
 800063c:	4b65      	ldr	r3, [pc, #404]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 800063e:	79db      	ldrb	r3, [r3, #7]
 8000640:	09db      	lsrs	r3, r3, #7
 8000642:	b2db      	uxtb	r3, r3
 8000644:	b21a      	sxth	r2, r3
 8000646:	4b63      	ldr	r3, [pc, #396]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000648:	7a1b      	ldrb	r3, [r3, #8]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	b21b      	sxth	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b21a      	sxth	r2, r3
 8000652:	4b60      	ldr	r3, [pc, #384]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000654:	7a5b      	ldrb	r3, [r3, #9]
 8000656:	025b      	lsls	r3, r3, #9
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29b      	uxth	r3, r3
 8000660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b5c      	ldr	r3, [pc, #368]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 8000668:	815a      	strh	r2, [r3, #10]
		CH[6] = (buf[9] >> 2 | (buf[10] << 6)) & 0x07FF;
 800066a:	4b5a      	ldr	r3, [pc, #360]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 800066c:	7a5b      	ldrb	r3, [r3, #9]
 800066e:	089b      	lsrs	r3, r3, #2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	b21a      	sxth	r2, r3
 8000674:	4b57      	ldr	r3, [pc, #348]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000676:	7a9b      	ldrb	r3, [r3, #10]
 8000678:	019b      	lsls	r3, r3, #6
 800067a:	b21b      	sxth	r3, r3
 800067c:	4313      	orrs	r3, r2
 800067e:	b21b      	sxth	r3, r3
 8000680:	b29b      	uxth	r3, r3
 8000682:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b53      	ldr	r3, [pc, #332]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 800068a:	819a      	strh	r2, [r3, #12]
		CH[7] = (buf[10] >> 5 | (buf[11] << 3)) & 0x07FF;
 800068c:	4b51      	ldr	r3, [pc, #324]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 800068e:	7a9b      	ldrb	r3, [r3, #10]
 8000690:	095b      	lsrs	r3, r3, #5
 8000692:	b2db      	uxtb	r3, r3
 8000694:	b21a      	sxth	r2, r3
 8000696:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000698:	7adb      	ldrb	r3, [r3, #11]
 800069a:	00db      	lsls	r3, r3, #3
 800069c:	b21b      	sxth	r3, r3
 800069e:	4313      	orrs	r3, r2
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	4b4b      	ldr	r3, [pc, #300]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 80006ac:	81da      	strh	r2, [r3, #14]
		CH[8] = (buf[12] << 0 | (buf[13] << 8)) & 0x07FF;
 80006ae:	4b49      	ldr	r3, [pc, #292]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80006b0:	7b1b      	ldrb	r3, [r3, #12]
 80006b2:	b21a      	sxth	r2, r3
 80006b4:	4b47      	ldr	r3, [pc, #284]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80006b6:	7b5b      	ldrb	r3, [r3, #13]
 80006b8:	021b      	lsls	r3, r3, #8
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	4b43      	ldr	r3, [pc, #268]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 80006ca:	821a      	strh	r2, [r3, #16]
		CH[9] = (buf[13] >> 3 | (buf[14] << 5)) & 0x07FF;
 80006cc:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80006ce:	7b5b      	ldrb	r3, [r3, #13]
 80006d0:	08db      	lsrs	r3, r3, #3
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	b21a      	sxth	r2, r3
 80006d6:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80006d8:	7b9b      	ldrb	r3, [r3, #14]
 80006da:	015b      	lsls	r3, r3, #5
 80006dc:	b21b      	sxth	r3, r3
 80006de:	4313      	orrs	r3, r2
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b3b      	ldr	r3, [pc, #236]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 80006ec:	825a      	strh	r2, [r3, #18]
		CH[10] = (buf[14] >> 6 | (buf[15] << 2) | buf[16] << 10) & 0x07FF;
 80006ee:	4b39      	ldr	r3, [pc, #228]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80006f0:	7b9b      	ldrb	r3, [r3, #14]
 80006f2:	099b      	lsrs	r3, r3, #6
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	b21a      	sxth	r2, r3
 80006f8:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80006fa:	7bdb      	ldrb	r3, [r3, #15]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	b21b      	sxth	r3, r3
 8000700:	4313      	orrs	r3, r2
 8000702:	b21a      	sxth	r2, r3
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000706:	7c1b      	ldrb	r3, [r3, #16]
 8000708:	029b      	lsls	r3, r3, #10
 800070a:	b21b      	sxth	r3, r3
 800070c:	4313      	orrs	r3, r2
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 800071a:	829a      	strh	r2, [r3, #20]
		CH[11] = (buf[16] >> 1 | (buf[17] << 7)) & 0x07FF;
 800071c:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 800071e:	7c1b      	ldrb	r3, [r3, #16]
 8000720:	085b      	lsrs	r3, r3, #1
 8000722:	b2db      	uxtb	r3, r3
 8000724:	b21a      	sxth	r2, r3
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000728:	7c5b      	ldrb	r3, [r3, #17]
 800072a:	01db      	lsls	r3, r3, #7
 800072c:	b21b      	sxth	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	b21b      	sxth	r3, r3
 8000732:	b29b      	uxth	r3, r3
 8000734:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 800073c:	82da      	strh	r2, [r3, #22]
		CH[12] = (buf[17] >> 4 | (buf[18] << 4)) & 0x07FF;
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000740:	7c5b      	ldrb	r3, [r3, #17]
 8000742:	091b      	lsrs	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	b21a      	sxth	r2, r3
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 800074a:	7c9b      	ldrb	r3, [r3, #18]
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	b21b      	sxth	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b21b      	sxth	r3, r3
 8000754:	b29b      	uxth	r3, r3
 8000756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800075a:	b29a      	uxth	r2, r3
 800075c:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 800075e:	831a      	strh	r2, [r3, #24]
		CH[13] = (buf[18] >> 7 | (buf[19] << 1) | buf[20] << 9) & 0x07FF;
 8000760:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000762:	7c9b      	ldrb	r3, [r3, #18]
 8000764:	09db      	lsrs	r3, r3, #7
 8000766:	b2db      	uxtb	r3, r3
 8000768:	b21a      	sxth	r2, r3
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 800076c:	7cdb      	ldrb	r3, [r3, #19]
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	b21b      	sxth	r3, r3
 8000772:	4313      	orrs	r3, r2
 8000774:	b21a      	sxth	r2, r3
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000778:	7d1b      	ldrb	r3, [r3, #20]
 800077a:	025b      	lsls	r3, r3, #9
 800077c:	b21b      	sxth	r3, r3
 800077e:	4313      	orrs	r3, r2
 8000780:	b21b      	sxth	r3, r3
 8000782:	b29b      	uxth	r3, r3
 8000784:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000788:	b29a      	uxth	r2, r3
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 800078c:	835a      	strh	r2, [r3, #26]
		CH[14] = (buf[20] >> 2 | (buf[21] << 6)) & 0x07FF;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 8000790:	7d1b      	ldrb	r3, [r3, #20]
 8000792:	089b      	lsrs	r3, r3, #2
 8000794:	b2db      	uxtb	r3, r3
 8000796:	b21a      	sxth	r2, r3
 8000798:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 800079a:	7d5b      	ldrb	r3, [r3, #21]
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	b21b      	sxth	r3, r3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b21b      	sxth	r3, r3
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007aa:	b29a      	uxth	r2, r3
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 80007ae:	839a      	strh	r2, [r3, #28]
		CH[15] = (buf[21] >> 5 | (buf[22] << 3)) & 0x07FF;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80007b2:	7d5b      	ldrb	r3, [r3, #21]
 80007b4:	095b      	lsrs	r3, r3, #5
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_UART_RxCpltCallback+0x25c>)
 80007bc:	7d9b      	ldrb	r3, [r3, #22]
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	b21b      	sxth	r3, r3
 80007c2:	4313      	orrs	r3, r2
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80007cc:	b29a      	uxth	r2, r3
 80007ce:	4b02      	ldr	r3, [pc, #8]	; (80007d8 <HAL_UART_RxCpltCallback+0x260>)
 80007d0:	83da      	strh	r2, [r3, #30]
 80007d2:	e003      	b.n	80007dc <HAL_UART_RxCpltCallback+0x264>
 80007d4:	20000050 	.word	0x20000050
 80007d8:	20000028 	.word	0x20000028

		if (buf[23] & (1 << 0)) {
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <HAL_UART_RxCpltCallback+0x2d0>)
 80007de:	7ddb      	ldrb	r3, [r3, #23]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d003      	beq.n	80007f0 <HAL_UART_RxCpltCallback+0x278>
			CH[16] = 1;
 80007e8:	4b18      	ldr	r3, [pc, #96]	; (800084c <HAL_UART_RxCpltCallback+0x2d4>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	841a      	strh	r2, [r3, #32]
 80007ee:	e002      	b.n	80007f6 <HAL_UART_RxCpltCallback+0x27e>
		} else {
			CH[16] = 0;
 80007f0:	4b16      	ldr	r3, [pc, #88]	; (800084c <HAL_UART_RxCpltCallback+0x2d4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	841a      	strh	r2, [r3, #32]
		}

		if (buf[23] & (1 << 1)) {
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <HAL_UART_RxCpltCallback+0x2d0>)
 80007f8:	7ddb      	ldrb	r3, [r3, #23]
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <HAL_UART_RxCpltCallback+0x292>
			CH[17] = 1;
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <HAL_UART_RxCpltCallback+0x2d4>)
 8000804:	2201      	movs	r2, #1
 8000806:	845a      	strh	r2, [r3, #34]	; 0x22
 8000808:	e002      	b.n	8000810 <HAL_UART_RxCpltCallback+0x298>
		} else {
			CH[17] = 0;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_UART_RxCpltCallback+0x2d4>)
 800080c:	2200      	movs	r2, #0
 800080e:	845a      	strh	r2, [r3, #34]	; 0x22
		}

		// Failsafe
		failsafe_status = SBUS_SIGNAL_OK;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_UART_RxCpltCallback+0x2d8>)
 8000812:	2200      	movs	r2, #0
 8000814:	801a      	strh	r2, [r3, #0]
		if (buf[23] & (1 << 2)) {
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_UART_RxCpltCallback+0x2d0>)
 8000818:	7ddb      	ldrb	r3, [r3, #23]
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <HAL_UART_RxCpltCallback+0x2b0>
			failsafe_status = SBUS_SIGNAL_LOST;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_UART_RxCpltCallback+0x2d8>)
 8000824:	2201      	movs	r2, #1
 8000826:	801a      	strh	r2, [r3, #0]
		}

		if (buf[23] & (1 << 3)) {
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <HAL_UART_RxCpltCallback+0x2d0>)
 800082a:	7ddb      	ldrb	r3, [r3, #23]
 800082c:	f003 0308 	and.w	r3, r3, #8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d002      	beq.n	800083a <HAL_UART_RxCpltCallback+0x2c2>
			failsafe_status = SBUS_SIGNAL_FAILSAFE;
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_UART_RxCpltCallback+0x2d8>)
 8000836:	2203      	movs	r2, #3
 8000838:	801a      	strh	r2, [r3, #0]
		}

		//	SBUS_footer=buf[24];

	}
}
 800083a:	bf00      	nop
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	20000050 	.word	0x20000050
 800084c:	20000028 	.word	0x20000028
 8000850:	2000004c 	.word	0x2000004c

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f000 f9c2 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f810 	bl	8000880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f7ff fe54 	bl	800050c <MX_GPIO_Init>
  MX_DMA_Init();
 8000864:	f7ff fe32 	bl	80004cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000868:	f000 f8ea 	bl	8000a40 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart2, buf, 25);
 800086c:	2219      	movs	r2, #25
 800086e:	4902      	ldr	r1, [pc, #8]	; (8000878 <main+0x24>)
 8000870:	4802      	ldr	r0, [pc, #8]	; (800087c <main+0x28>)
 8000872:	f001 fcc2 	bl	80021fa <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000876:	e7fe      	b.n	8000876 <main+0x22>
 8000878:	20000050 	.word	0x20000050
 800087c:	200000cc 	.word	0x200000cc

08000880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b094      	sub	sp, #80	; 0x50
 8000884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000886:	f107 0320 	add.w	r3, r7, #32
 800088a:	2230      	movs	r2, #48	; 0x30
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f002 f90e 	bl	8002ab0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a4:	2300      	movs	r3, #0
 80008a6:	60bb      	str	r3, [r7, #8]
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <SystemClock_Config+0xd0>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	4a28      	ldr	r2, [pc, #160]	; (8000950 <SystemClock_Config+0xd0>)
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
 80008b4:	4b26      	ldr	r3, [pc, #152]	; (8000950 <SystemClock_Config+0xd0>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	4b23      	ldr	r3, [pc, #140]	; (8000954 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xd4>)
 80008ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d2:	6013      	str	r3, [r2, #0]
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xd4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e0:	2301      	movs	r3, #1
 80008e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ea:	2302      	movs	r3, #2
 80008ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008f4:	2319      	movs	r3, #25
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008fe:	2304      	movs	r3, #4
 8000900:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000902:	2307      	movs	r3, #7
 8000904:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000906:	f107 0320 	add.w	r3, r7, #32
 800090a:	4618      	mov	r0, r3
 800090c:	f000 ffe0 	bl	80018d0 <HAL_RCC_OscConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000916:	f000 f81f 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800091a:	230f      	movs	r3, #15
 800091c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091e:	2302      	movs	r3, #2
 8000920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	2102      	movs	r1, #2
 8000936:	4618      	mov	r0, r3
 8000938:	f001 fa42 	bl	8001dc0 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000942:	f000 f809 	bl	8000958 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3750      	adds	r7, #80	; 0x50
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	40007000 	.word	0x40007000

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <HAL_MspInit+0x4c>)
 8000974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000978:	6453      	str	r3, [r2, #68]	; 0x44
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	603b      	str	r3, [r7, #0]
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a08      	ldr	r2, [pc, #32]	; (80009b0 <HAL_MspInit+0x4c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <NMI_Handler+0x4>

080009ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009be:	e7fe      	b.n	80009be <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <MemManage_Handler+0x4>

080009c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f940 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <DMA1_Stream5_IRQHandler+0x10>)
 8000a0e:	f000 fb71 	bl	80010f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000006c 	.word	0x2000006c

08000a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <SystemInit+0x20>)
 8000a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a26:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <SystemInit+0x20>)
 8000a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_USART2_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 100000;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	4a11      	ldr	r2, [pc, #68]	; (8000a94 <MX_USART2_UART_Init+0x54>)
 8000a4e:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a64:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6c:	4b07      	ldr	r3, [pc, #28]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a78:	4804      	ldr	r0, [pc, #16]	; (8000a8c <MX_USART2_UART_Init+0x4c>)
 8000a7a:	f001 fb71 	bl	8002160 <HAL_UART_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000a84:	f7ff ff68 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200000cc 	.word	0x200000cc
 8000a90:	40004400 	.word	0x40004400
 8000a94:	000186a0 	.word	0x000186a0

08000a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <HAL_UART_MspInit+0xe0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d15a      	bne.n	8000b70 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <HAL_UART_MspInit+0xe4>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <HAL_UART_MspInit+0xe4>)
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <HAL_UART_MspInit+0xe4>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b28      	ldr	r3, [pc, #160]	; (8000b7c <HAL_UART_MspInit+0xe4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a27      	ldr	r2, [pc, #156]	; (8000b7c <HAL_UART_MspInit+0xe4>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b25      	ldr	r3, [pc, #148]	; (8000b7c <HAL_UART_MspInit+0xe4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af2:	230c      	movs	r3, #12
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b02:	2307      	movs	r3, #7
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	481c      	ldr	r0, [pc, #112]	; (8000b80 <HAL_UART_MspInit+0xe8>)
 8000b0e:	f000 fd5b 	bl	80015c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b14:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <HAL_UART_MspInit+0xf0>)
 8000b16:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b32:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000b40:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b46:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4e:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000b54:	480b      	ldr	r0, [pc, #44]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b56:	f000 f9c7 	bl	8000ee8 <HAL_DMA_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b60:	f7ff fefa 	bl	8000958 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b68:	639a      	str	r2, [r3, #56]	; 0x38
 8000b6a:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <HAL_UART_MspInit+0xec>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b70:	bf00      	nop
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40004400 	.word	0x40004400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020000 	.word	0x40020000
 8000b84:	2000006c 	.word	0x2000006c
 8000b88:	40026088 	.word	0x40026088

08000b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b92:	490e      	ldr	r1, [pc, #56]	; (8000bcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b94:	4a0e      	ldr	r2, [pc, #56]	; (8000bd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ba8:	4c0b      	ldr	r4, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bb6:	f7ff ff31 	bl	8000a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f001 ff55 	bl	8002a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bbe:	f7ff fe49 	bl	8000854 <main>
  bx  lr    
 8000bc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	08002b08 	.word	0x08002b08
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	20000114 	.word	0x20000114

08000bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be4:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <HAL_Init+0x40>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf0:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_Init+0x40>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x40>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x40>)
 8000c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f92b 	bl	8000e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fea6 	bl	8000964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f943 	bl	8000ece <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f90b 	bl	8000e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <HAL_IncTick+0x24>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000008 	.word	0x20000008
 8000ca8:	20000110 	.word	0x20000110

08000cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <HAL_GetTick+0x14>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	20000110 	.word	0x20000110

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	db0b      	blt.n	8000d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 021f 	and.w	r2, r3, #31
 8000d40:	4907      	ldr	r1, [pc, #28]	; (8000d60 <__NVIC_EnableIRQ+0x38>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	095b      	lsrs	r3, r3, #5
 8000d48:	2001      	movs	r0, #1
 8000d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000e100 	.word	0xe000e100

08000d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	db0a      	blt.n	8000d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	490c      	ldr	r1, [pc, #48]	; (8000db0 <__NVIC_SetPriority+0x4c>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	0112      	lsls	r2, r2, #4
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	440b      	add	r3, r1
 8000d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d8c:	e00a      	b.n	8000da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4908      	ldr	r1, [pc, #32]	; (8000db4 <__NVIC_SetPriority+0x50>)
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	f003 030f 	and.w	r3, r3, #15
 8000d9a:	3b04      	subs	r3, #4
 8000d9c:	0112      	lsls	r2, r2, #4
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	440b      	add	r3, r1
 8000da2:	761a      	strb	r2, [r3, #24]
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000e100 	.word	0xe000e100
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	; 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f1c3 0307 	rsb	r3, r3, #7
 8000dd2:	2b04      	cmp	r3, #4
 8000dd4:	bf28      	it	cs
 8000dd6:	2304      	movcs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3304      	adds	r3, #4
 8000dde:	2b06      	cmp	r3, #6
 8000de0:	d902      	bls.n	8000de8 <NVIC_EncodePriority+0x30>
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3b03      	subs	r3, #3
 8000de6:	e000      	b.n	8000dea <NVIC_EncodePriority+0x32>
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	f04f 32ff 	mov.w	r2, #4294967295
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e00:	f04f 31ff 	mov.w	r1, #4294967295
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	fa01 f303 	lsl.w	r3, r1, r3
 8000e0a:	43d9      	mvns	r1, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e10:	4313      	orrs	r3, r2
         );
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3724      	adds	r7, #36	; 0x24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e30:	d301      	bcc.n	8000e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e32:	2301      	movs	r3, #1
 8000e34:	e00f      	b.n	8000e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <SysTick_Config+0x40>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3e:	210f      	movs	r1, #15
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	f7ff ff8e 	bl	8000d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e48:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <SysTick_Config+0x40>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4e:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SysTick_Config+0x40>)
 8000e50:	2207      	movs	r2, #7
 8000e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ff29 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b086      	sub	sp, #24
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	60b9      	str	r1, [r7, #8]
 8000e84:	607a      	str	r2, [r7, #4]
 8000e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8c:	f7ff ff3e 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	68b9      	ldr	r1, [r7, #8]
 8000e96:	6978      	ldr	r0, [r7, #20]
 8000e98:	f7ff ff8e 	bl	8000db8 <NVIC_EncodePriority>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea2:	4611      	mov	r1, r2
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff5d 	bl	8000d64 <__NVIC_SetPriority>
}
 8000eaa:	bf00      	nop
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	4603      	mov	r3, r0
 8000eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff ff31 	bl	8000d28 <__NVIC_EnableIRQ>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ffa2 	bl	8000e20 <SysTick_Config>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff feda 	bl	8000cac <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e099      	b.n	8001038 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2202      	movs	r2, #2
 8000f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0201 	bic.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f24:	e00f      	b.n	8000f46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f26:	f7ff fec1 	bl	8000cac <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d908      	bls.n	8000f46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2220      	movs	r2, #32
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e078      	b.n	8001038 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1e8      	bne.n	8000f26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	4b38      	ldr	r3, [pc, #224]	; (8001040 <HAL_DMA_Init+0x158>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d107      	bne.n	8000fb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f023 0307 	bic.w	r3, r3, #7
 8000fc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d117      	bne.n	800100a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00e      	beq.n	800100a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 fa6f 	bl	80014d0 <DMA_CheckFifoParam>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d008      	beq.n	800100a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2240      	movs	r2, #64	; 0x40
 8000ffc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001006:	2301      	movs	r3, #1
 8001008:	e016      	b.n	8001038 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fa26 	bl	8001464 <DMA_CalcBaseAndBitshift>
 8001018:	4603      	mov	r3, r0
 800101a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001020:	223f      	movs	r2, #63	; 0x3f
 8001022:	409a      	lsls	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001036:	2300      	movs	r3, #0
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	f010803f 	.word	0xf010803f

08001044 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_DMA_Start_IT+0x26>
 8001066:	2302      	movs	r3, #2
 8001068:	e040      	b.n	80010ec <HAL_DMA_Start_IT+0xa8>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b01      	cmp	r3, #1
 800107c:	d12f      	bne.n	80010de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2202      	movs	r2, #2
 8001082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f000 f9b8 	bl	8001408 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109c:	223f      	movs	r2, #63	; 0x3f
 800109e:	409a      	lsls	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0216 	orr.w	r2, r2, #22
 80010b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f042 0208 	orr.w	r2, r2, #8
 80010ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0201 	orr.w	r2, r2, #1
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e005      	b.n	80010ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80010e6:	2302      	movs	r3, #2
 80010e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001100:	4b92      	ldr	r3, [pc, #584]	; (800134c <HAL_DMA_IRQHandler+0x258>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a92      	ldr	r2, [pc, #584]	; (8001350 <HAL_DMA_IRQHandler+0x25c>)
 8001106:	fba2 2303 	umull	r2, r3, r2, r3
 800110a:	0a9b      	lsrs	r3, r3, #10
 800110c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001112:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111e:	2208      	movs	r2, #8
 8001120:	409a      	lsls	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d01a      	beq.n	8001160 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	d013      	beq.n	8001160 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0204 	bic.w	r2, r2, #4
 8001146:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800114c:	2208      	movs	r2, #8
 800114e:	409a      	lsls	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001158:	f043 0201 	orr.w	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001164:	2201      	movs	r2, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4013      	ands	r3, r2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d012      	beq.n	8001196 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001182:	2201      	movs	r2, #1
 8001184:	409a      	lsls	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118e:	f043 0202 	orr.w	r2, r3, #2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800119a:	2204      	movs	r2, #4
 800119c:	409a      	lsls	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d012      	beq.n	80011cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00b      	beq.n	80011cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	2204      	movs	r2, #4
 80011ba:	409a      	lsls	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c4:	f043 0204 	orr.w	r2, r3, #4
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d0:	2210      	movs	r2, #16
 80011d2:	409a      	lsls	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d043      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d03c      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ee:	2210      	movs	r2, #16
 80011f0:	409a      	lsls	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d018      	beq.n	8001236 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d108      	bne.n	8001224 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	2b00      	cmp	r3, #0
 8001218:	d024      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	4798      	blx	r3
 8001222:	e01f      	b.n	8001264 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	2b00      	cmp	r3, #0
 800122a:	d01b      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	4798      	blx	r3
 8001234:	e016      	b.n	8001264 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001240:	2b00      	cmp	r3, #0
 8001242:	d107      	bne.n	8001254 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0208 	bic.w	r2, r2, #8
 8001252:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001268:	2220      	movs	r2, #32
 800126a:	409a      	lsls	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 808e 	beq.w	8001392 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8086 	beq.w	8001392 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128a:	2220      	movs	r2, #32
 800128c:	409a      	lsls	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b05      	cmp	r3, #5
 800129c:	d136      	bne.n	800130c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0216 	bic.w	r2, r2, #22
 80012ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695a      	ldr	r2, [r3, #20]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d103      	bne.n	80012ce <HAL_DMA_IRQHandler+0x1da>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f022 0208 	bic.w	r2, r2, #8
 80012dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e2:	223f      	movs	r2, #63	; 0x3f
 80012e4:	409a      	lsls	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2200      	movs	r2, #0
 80012f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d07d      	beq.n	80013fe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	4798      	blx	r3
        }
        return;
 800130a:	e078      	b.n	80013fe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d01c      	beq.n	8001354 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001324:	2b00      	cmp	r3, #0
 8001326:	d108      	bne.n	800133a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132c:	2b00      	cmp	r3, #0
 800132e:	d030      	beq.n	8001392 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	4798      	blx	r3
 8001338:	e02b      	b.n	8001392 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133e:	2b00      	cmp	r3, #0
 8001340:	d027      	beq.n	8001392 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	4798      	blx	r3
 800134a:	e022      	b.n	8001392 <HAL_DMA_IRQHandler+0x29e>
 800134c:	20000000 	.word	0x20000000
 8001350:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10f      	bne.n	8001382 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f022 0210 	bic.w	r2, r2, #16
 8001370:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001396:	2b00      	cmp	r3, #0
 8001398:	d032      	beq.n	8001400 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d022      	beq.n	80013ec <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2205      	movs	r2, #5
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0201 	bic.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d307      	bcc.n	80013da <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1f2      	bne.n	80013be <HAL_DMA_IRQHandler+0x2ca>
 80013d8:	e000      	b.n	80013dc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80013da:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
 80013fc:	e000      	b.n	8001400 <HAL_DMA_IRQHandler+0x30c>
        return;
 80013fe:	bf00      	nop
    }
  }
}
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop

08001408 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001424:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b40      	cmp	r3, #64	; 0x40
 8001434:	d108      	bne.n	8001448 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68ba      	ldr	r2, [r7, #8]
 8001444:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001446:	e007      	b.n	8001458 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	60da      	str	r2, [r3, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	3b10      	subs	r3, #16
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <DMA_CalcBaseAndBitshift+0x64>)
 8001476:	fba2 2303 	umull	r2, r3, r2, r3
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <DMA_CalcBaseAndBitshift+0x68>)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	4413      	add	r3, r2
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2b03      	cmp	r3, #3
 8001490:	d909      	bls.n	80014a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	1d1a      	adds	r2, r3, #4
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	659a      	str	r2, [r3, #88]	; 0x58
 80014a4:	e007      	b.n	80014b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80014ae:	f023 0303 	bic.w	r3, r3, #3
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	aaaaaaab 	.word	0xaaaaaaab
 80014cc:	08002af0 	.word	0x08002af0

080014d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d11f      	bne.n	800152a <DMA_CheckFifoParam+0x5a>
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d856      	bhi.n	800159e <DMA_CheckFifoParam+0xce>
 80014f0:	a201      	add	r2, pc, #4	; (adr r2, 80014f8 <DMA_CheckFifoParam+0x28>)
 80014f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f6:	bf00      	nop
 80014f8:	08001509 	.word	0x08001509
 80014fc:	0800151b 	.word	0x0800151b
 8001500:	08001509 	.word	0x08001509
 8001504:	0800159f 	.word	0x0800159f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d046      	beq.n	80015a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001518:	e043      	b.n	80015a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001522:	d140      	bne.n	80015a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001528:	e03d      	b.n	80015a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001532:	d121      	bne.n	8001578 <DMA_CheckFifoParam+0xa8>
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b03      	cmp	r3, #3
 8001538:	d837      	bhi.n	80015aa <DMA_CheckFifoParam+0xda>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <DMA_CheckFifoParam+0x70>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	08001551 	.word	0x08001551
 8001544:	08001557 	.word	0x08001557
 8001548:	08001551 	.word	0x08001551
 800154c:	08001569 	.word	0x08001569
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
      break;
 8001554:	e030      	b.n	80015b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d025      	beq.n	80015ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001566:	e022      	b.n	80015ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001570:	d11f      	bne.n	80015b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001576:	e01c      	b.n	80015b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b02      	cmp	r3, #2
 800157c:	d903      	bls.n	8001586 <DMA_CheckFifoParam+0xb6>
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d003      	beq.n	800158c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001584:	e018      	b.n	80015b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	73fb      	strb	r3, [r7, #15]
      break;
 800158a:	e015      	b.n	80015b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001590:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00e      	beq.n	80015b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
      break;
 800159c:	e00b      	b.n	80015b6 <DMA_CheckFifoParam+0xe6>
      break;
 800159e:	bf00      	nop
 80015a0:	e00a      	b.n	80015b8 <DMA_CheckFifoParam+0xe8>
      break;
 80015a2:	bf00      	nop
 80015a4:	e008      	b.n	80015b8 <DMA_CheckFifoParam+0xe8>
      break;
 80015a6:	bf00      	nop
 80015a8:	e006      	b.n	80015b8 <DMA_CheckFifoParam+0xe8>
      break;
 80015aa:	bf00      	nop
 80015ac:	e004      	b.n	80015b8 <DMA_CheckFifoParam+0xe8>
      break;
 80015ae:	bf00      	nop
 80015b0:	e002      	b.n	80015b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80015b2:	bf00      	nop
 80015b4:	e000      	b.n	80015b8 <DMA_CheckFifoParam+0xe8>
      break;
 80015b6:	bf00      	nop
    }
  } 
  
  return status; 
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b089      	sub	sp, #36	; 0x24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	e159      	b.n	8001898 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015e4:	2201      	movs	r2, #1
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	f040 8148 	bne.w	8001892 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	2b01      	cmp	r3, #1
 800160c:	d005      	beq.n	800161a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001616:	2b02      	cmp	r3, #2
 8001618:	d130      	bne.n	800167c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	2203      	movs	r2, #3
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4013      	ands	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001650:	2201      	movs	r2, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 0201 	and.w	r2, r3, #1
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4313      	orrs	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b03      	cmp	r3, #3
 8001686:	d017      	beq.n	80016b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d123      	bne.n	800170c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	220f      	movs	r2, #15
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	08da      	lsrs	r2, r3, #3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3208      	adds	r2, #8
 8001706:	69b9      	ldr	r1, [r7, #24]
 8001708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	2203      	movs	r2, #3
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0203 	and.w	r2, r3, #3
 800172c:	69fb      	ldr	r3, [r7, #28]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80a2 	beq.w	8001892 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <HAL_GPIO_Init+0x2e8>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a56      	ldr	r2, [pc, #344]	; (80018b0 <HAL_GPIO_Init+0x2e8>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b54      	ldr	r3, [pc, #336]	; (80018b0 <HAL_GPIO_Init+0x2e8>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800176a:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_GPIO_Init+0x2ec>)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	089b      	lsrs	r3, r3, #2
 8001770:	3302      	adds	r3, #2
 8001772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a49      	ldr	r2, [pc, #292]	; (80018b8 <HAL_GPIO_Init+0x2f0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d019      	beq.n	80017ca <HAL_GPIO_Init+0x202>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a48      	ldr	r2, [pc, #288]	; (80018bc <HAL_GPIO_Init+0x2f4>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0x1fe>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a47      	ldr	r2, [pc, #284]	; (80018c0 <HAL_GPIO_Init+0x2f8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <HAL_GPIO_Init+0x1fa>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a46      	ldr	r2, [pc, #280]	; (80018c4 <HAL_GPIO_Init+0x2fc>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0x1f6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a45      	ldr	r2, [pc, #276]	; (80018c8 <HAL_GPIO_Init+0x300>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_Init+0x1f2>
 80017b6:	2304      	movs	r3, #4
 80017b8:	e008      	b.n	80017cc <HAL_GPIO_Init+0x204>
 80017ba:	2307      	movs	r3, #7
 80017bc:	e006      	b.n	80017cc <HAL_GPIO_Init+0x204>
 80017be:	2303      	movs	r3, #3
 80017c0:	e004      	b.n	80017cc <HAL_GPIO_Init+0x204>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e002      	b.n	80017cc <HAL_GPIO_Init+0x204>
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x204>
 80017ca:	2300      	movs	r3, #0
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	f002 0203 	and.w	r2, r2, #3
 80017d2:	0092      	lsls	r2, r2, #2
 80017d4:	4093      	lsls	r3, r2
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017dc:	4935      	ldr	r1, [pc, #212]	; (80018b4 <HAL_GPIO_Init+0x2ec>)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ea:	4b38      	ldr	r3, [pc, #224]	; (80018cc <HAL_GPIO_Init+0x304>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	43db      	mvns	r3, r3
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	4013      	ands	r3, r2
 80017f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800180e:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <HAL_GPIO_Init+0x304>)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_GPIO_Init+0x304>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	43db      	mvns	r3, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4013      	ands	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d003      	beq.n	8001838 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001838:	4a24      	ldr	r2, [pc, #144]	; (80018cc <HAL_GPIO_Init+0x304>)
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183e:	4b23      	ldr	r3, [pc, #140]	; (80018cc <HAL_GPIO_Init+0x304>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	43db      	mvns	r3, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4013      	ands	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001862:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_GPIO_Init+0x304>)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001868:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_GPIO_Init+0x304>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800188c:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <HAL_GPIO_Init+0x304>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3301      	adds	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	2b0f      	cmp	r3, #15
 800189c:	f67f aea2 	bls.w	80015e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a0:	bf00      	nop
 80018a2:	bf00      	nop
 80018a4:	3724      	adds	r7, #36	; 0x24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40013800 	.word	0x40013800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	40020400 	.word	0x40020400
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020c00 	.word	0x40020c00
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40013c00 	.word	0x40013c00

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e264      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d075      	beq.n	80019da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ee:	4ba3      	ldr	r3, [pc, #652]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	d00c      	beq.n	8001914 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fa:	4ba0      	ldr	r3, [pc, #640]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001902:	2b08      	cmp	r3, #8
 8001904:	d112      	bne.n	800192c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001906:	4b9d      	ldr	r3, [pc, #628]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001912:	d10b      	bne.n	800192c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	4b99      	ldr	r3, [pc, #612]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d05b      	beq.n	80019d8 <HAL_RCC_OscConfig+0x108>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d157      	bne.n	80019d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e23f      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001934:	d106      	bne.n	8001944 <HAL_RCC_OscConfig+0x74>
 8001936:	4b91      	ldr	r3, [pc, #580]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a90      	ldr	r2, [pc, #576]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	e01d      	b.n	8001980 <HAL_RCC_OscConfig+0xb0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800194c:	d10c      	bne.n	8001968 <HAL_RCC_OscConfig+0x98>
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a8a      	ldr	r2, [pc, #552]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b88      	ldr	r3, [pc, #544]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a87      	ldr	r2, [pc, #540]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e00b      	b.n	8001980 <HAL_RCC_OscConfig+0xb0>
 8001968:	4b84      	ldr	r3, [pc, #528]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a83      	ldr	r2, [pc, #524]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800196e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a80      	ldr	r2, [pc, #512]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 800197a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f990 	bl	8000cac <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f98c 	bl	8000cac <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	; 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e204      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	4b76      	ldr	r3, [pc, #472]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0xc0>
 80019ae:	e014      	b.n	80019da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff f97c 	bl	8000cac <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff f978 	bl	8000cac <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	; 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e1f0      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	4b6c      	ldr	r3, [pc, #432]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0xe8>
 80019d6:	e000      	b.n	80019da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d063      	beq.n	8001aae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00b      	beq.n	8001a0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f2:	4b62      	ldr	r3, [pc, #392]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d11c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fe:	4b5f      	ldr	r3, [pc, #380]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d116      	bne.n	8001a38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_RCC_OscConfig+0x152>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d001      	beq.n	8001a22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e1c4      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4952      	ldr	r1, [pc, #328]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	e03a      	b.n	8001aae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a40:	4b4f      	ldr	r3, [pc, #316]	; (8001b80 <HAL_RCC_OscConfig+0x2b0>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff f931 	bl	8000cac <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f92d 	bl	8000cac <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e1a5      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4940      	ldr	r1, [pc, #256]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
 8001a80:	e015      	b.n	8001aae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x2b0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f910 	bl	8000cac <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a90:	f7ff f90c 	bl	8000cac <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e184      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	4b36      	ldr	r3, [pc, #216]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d030      	beq.n	8001b1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d016      	beq.n	8001af0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ac2:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7ff f8f0 	bl	8000cac <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ad0:	f7ff f8ec 	bl	8000cac <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e164      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0f0      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x200>
 8001aee:	e015      	b.n	8001b1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af0:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af6:	f7ff f8d9 	bl	8000cac <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff f8d5 	bl	8000cac <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e14d      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80a0 	beq.w	8001c6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_RCC_OscConfig+0x2b8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d121      	bne.n	8001baa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_RCC_OscConfig+0x2b8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_RCC_OscConfig+0x2b8>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7ff f89b 	bl	8000cac <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	e011      	b.n	8001b9e <HAL_RCC_OscConfig+0x2ce>
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	42470000 	.word	0x42470000
 8001b84:	42470e80 	.word	0x42470e80
 8001b88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8c:	f7ff f88e 	bl	8000cac <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e106      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9e:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <HAL_RCC_OscConfig+0x4e4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d106      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x2f0>
 8001bb2:	4b81      	ldr	r3, [pc, #516]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a80      	ldr	r2, [pc, #512]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	e01c      	b.n	8001bfa <HAL_RCC_OscConfig+0x32a>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b05      	cmp	r3, #5
 8001bc6:	d10c      	bne.n	8001be2 <HAL_RCC_OscConfig+0x312>
 8001bc8:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bcc:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bce:	f043 0304 	orr.w	r3, r3, #4
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	4b78      	ldr	r3, [pc, #480]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a77      	ldr	r2, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	e00b      	b.n	8001bfa <HAL_RCC_OscConfig+0x32a>
 8001be2:	4b75      	ldr	r3, [pc, #468]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be6:	4a74      	ldr	r2, [pc, #464]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001be8:	f023 0301 	bic.w	r3, r3, #1
 8001bec:	6713      	str	r3, [r2, #112]	; 0x70
 8001bee:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a71      	ldr	r2, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d015      	beq.n	8001c2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff f853 	bl	8000cac <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f84f 	bl	8000cac <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0c5      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	4b65      	ldr	r3, [pc, #404]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ee      	beq.n	8001c0a <HAL_RCC_OscConfig+0x33a>
 8001c2c:	e014      	b.n	8001c58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f83d 	bl	8000cac <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff f839 	bl	8000cac <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0af      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4c:	4b5a      	ldr	r3, [pc, #360]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1ee      	bne.n	8001c36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c58:	7dfb      	ldrb	r3, [r7, #23]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b56      	ldr	r3, [pc, #344]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	4a55      	ldr	r2, [pc, #340]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 809b 	beq.w	8001daa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c74:	4b50      	ldr	r3, [pc, #320]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d05c      	beq.n	8001d3a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d141      	bne.n	8001d0c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c88:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <HAL_RCC_OscConfig+0x4ec>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8e:	f7ff f80d 	bl	8000cac <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff f809 	bl	8000cac <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e081      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca8:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	019b      	lsls	r3, r3, #6
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cca:	085b      	lsrs	r3, r3, #1
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	041b      	lsls	r3, r3, #16
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	061b      	lsls	r3, r3, #24
 8001cd8:	4937      	ldr	r1, [pc, #220]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <HAL_RCC_OscConfig+0x4ec>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ffe2 	bl	8000cac <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7fe ffde 	bl	8000cac <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e056      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfe:	4b2e      	ldr	r3, [pc, #184]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x41c>
 8001d0a:	e04e      	b.n	8001daa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_RCC_OscConfig+0x4ec>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7fe ffcb 	bl	8000cac <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe ffc7 	bl	8000cac <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e03f      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2c:	4b22      	ldr	r3, [pc, #136]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x44a>
 8001d38:	e037      	b.n	8001daa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d101      	bne.n	8001d46 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e032      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_RCC_OscConfig+0x4e8>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d028      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d121      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d11a      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d76:	4013      	ands	r3, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d7c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d111      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40007000 	.word	0x40007000
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	42470060 	.word	0x42470060

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0cc      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d90c      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d044      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d119      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7e:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8e:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e067      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9e:	4b37      	ldr	r3, [pc, #220]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f023 0203 	bic.w	r2, r3, #3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4934      	ldr	r1, [pc, #208]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe fefc 	bl	8000cac <HAL_GetTick>
 8001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7fe fef8 	bl	8000cac <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e04f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 020c 	and.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d1eb      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d20c      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c0>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fe5c 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	08002ad8 	.word	0x08002ad8
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b5b0      	push	{r4, r5, r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f92:	2100      	movs	r1, #0
 8001f94:	6079      	str	r1, [r7, #4]
 8001f96:	2100      	movs	r1, #0
 8001f98:	60f9      	str	r1, [r7, #12]
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fa2:	4952      	ldr	r1, [pc, #328]	; (80020ec <HAL_RCC_GetSysClockFreq+0x160>)
 8001fa4:	6889      	ldr	r1, [r1, #8]
 8001fa6:	f001 010c 	and.w	r1, r1, #12
 8001faa:	2908      	cmp	r1, #8
 8001fac:	d00d      	beq.n	8001fca <HAL_RCC_GetSysClockFreq+0x3e>
 8001fae:	2908      	cmp	r1, #8
 8001fb0:	f200 8094 	bhi.w	80020dc <HAL_RCC_GetSysClockFreq+0x150>
 8001fb4:	2900      	cmp	r1, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x32>
 8001fb8:	2904      	cmp	r1, #4
 8001fba:	d003      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x38>
 8001fbc:	e08e      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fc0:	60bb      	str	r3, [r7, #8]
       break;
 8001fc2:	e08e      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc4:	4b4b      	ldr	r3, [pc, #300]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fc6:	60bb      	str	r3, [r7, #8]
      break;
 8001fc8:	e08b      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fca:	4948      	ldr	r1, [pc, #288]	; (80020ec <HAL_RCC_GetSysClockFreq+0x160>)
 8001fcc:	6849      	ldr	r1, [r1, #4]
 8001fce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001fd2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd4:	4945      	ldr	r1, [pc, #276]	; (80020ec <HAL_RCC_GetSysClockFreq+0x160>)
 8001fd6:	6849      	ldr	r1, [r1, #4]
 8001fd8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001fdc:	2900      	cmp	r1, #0
 8001fde:	d024      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe0:	4942      	ldr	r1, [pc, #264]	; (80020ec <HAL_RCC_GetSysClockFreq+0x160>)
 8001fe2:	6849      	ldr	r1, [r1, #4]
 8001fe4:	0989      	lsrs	r1, r1, #6
 8001fe6:	4608      	mov	r0, r1
 8001fe8:	f04f 0100 	mov.w	r1, #0
 8001fec:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ff0:	f04f 0500 	mov.w	r5, #0
 8001ff4:	ea00 0204 	and.w	r2, r0, r4
 8001ff8:	ea01 0305 	and.w	r3, r1, r5
 8001ffc:	493d      	ldr	r1, [pc, #244]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ffe:	fb01 f003 	mul.w	r0, r1, r3
 8002002:	2100      	movs	r1, #0
 8002004:	fb01 f102 	mul.w	r1, r1, r2
 8002008:	1844      	adds	r4, r0, r1
 800200a:	493a      	ldr	r1, [pc, #232]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800200c:	fba2 0101 	umull	r0, r1, r2, r1
 8002010:	1863      	adds	r3, r4, r1
 8002012:	4619      	mov	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	461a      	mov	r2, r3
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	f7fe f8da 	bl	80001d4 <__aeabi_uldivmod>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4613      	mov	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e04a      	b.n	80020c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800202a:	4b30      	ldr	r3, [pc, #192]	; (80020ec <HAL_RCC_GetSysClockFreq+0x160>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	099b      	lsrs	r3, r3, #6
 8002030:	461a      	mov	r2, r3
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	f240 10ff 	movw	r0, #511	; 0x1ff
 800203a:	f04f 0100 	mov.w	r1, #0
 800203e:	ea02 0400 	and.w	r4, r2, r0
 8002042:	ea03 0501 	and.w	r5, r3, r1
 8002046:	4620      	mov	r0, r4
 8002048:	4629      	mov	r1, r5
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	014b      	lsls	r3, r1, #5
 8002054:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002058:	0142      	lsls	r2, r0, #5
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	1b00      	subs	r0, r0, r4
 8002060:	eb61 0105 	sbc.w	r1, r1, r5
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	f04f 0300 	mov.w	r3, #0
 800206c:	018b      	lsls	r3, r1, #6
 800206e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002072:	0182      	lsls	r2, r0, #6
 8002074:	1a12      	subs	r2, r2, r0
 8002076:	eb63 0301 	sbc.w	r3, r3, r1
 800207a:	f04f 0000 	mov.w	r0, #0
 800207e:	f04f 0100 	mov.w	r1, #0
 8002082:	00d9      	lsls	r1, r3, #3
 8002084:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002088:	00d0      	lsls	r0, r2, #3
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	1912      	adds	r2, r2, r4
 8002090:	eb45 0303 	adc.w	r3, r5, r3
 8002094:	f04f 0000 	mov.w	r0, #0
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	0299      	lsls	r1, r3, #10
 800209e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020a2:	0290      	lsls	r0, r2, #10
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4610      	mov	r0, r2
 80020aa:	4619      	mov	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	461a      	mov	r2, r3
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f7fe f88e 	bl	80001d4 <__aeabi_uldivmod>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4613      	mov	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_RCC_GetSysClockFreq+0x160>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	0c1b      	lsrs	r3, r3, #16
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	3301      	adds	r3, #1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d8:	60bb      	str	r3, [r7, #8]
      break;
 80020da:	e002      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80020de:	60bb      	str	r3, [r7, #8]
      break;
 80020e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020e2:	68bb      	ldr	r3, [r7, #8]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bdb0      	pop	{r4, r5, r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	00f42400 	.word	0x00f42400
 80020f4:	017d7840 	.word	0x017d7840

080020f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_RCC_GetHCLKFreq+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000000 	.word	0x20000000

08002110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002114:	f7ff fff0 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0a9b      	lsrs	r3, r3, #10
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4903      	ldr	r1, [pc, #12]	; (8002134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	08002ae8 	.word	0x08002ae8

08002138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800213c:	f7ff ffdc 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0b5b      	lsrs	r3, r3, #13
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4903      	ldr	r1, [pc, #12]	; (800215c <HAL_RCC_GetPCLK2Freq+0x24>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002154:	4618      	mov	r0, r3
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	08002ae8 	.word	0x08002ae8

08002160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e03f      	b.n	80021f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe fc86 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fa97 	bl	80026d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b084      	sub	sp, #16
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	4613      	mov	r3, r2
 8002206:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b20      	cmp	r3, #32
 8002212:	d11d      	bne.n	8002250 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_UART_Receive_DMA+0x26>
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e016      	b.n	8002252 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_UART_Receive_DMA+0x38>
 800222e:	2302      	movs	r3, #2
 8002230:	e00f      	b.n	8002252 <HAL_UART_Receive_DMA+0x58>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	461a      	mov	r2, r3
 8002244:	68b9      	ldr	r1, [r7, #8]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 f920 	bl	800248c <UART_Start_Receive_DMA>
 800224c:	4603      	mov	r3, r0
 800224e:	e000      	b.n	8002252 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002250:	2302      	movs	r3, #2
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr

08002282 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	460b      	mov	r3, r1
 800228c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b09c      	sub	sp, #112	; 0x70
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d172      	bne.n	800239c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80022b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022b8:	2200      	movs	r2, #0
 80022ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	330c      	adds	r3, #12
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c6:	e853 3f00 	ldrex	r3, [r3]
 80022ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80022cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80022d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	330c      	adds	r3, #12
 80022da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80022dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80022de:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80022e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022e4:	e841 2300 	strex	r3, r2, [r1]
 80022e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80022ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1e5      	bne.n	80022bc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3314      	adds	r3, #20
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	e853 3f00 	ldrex	r3, [r3]
 80022fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002302:	f023 0301 	bic.w	r3, r3, #1
 8002306:	667b      	str	r3, [r7, #100]	; 0x64
 8002308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	3314      	adds	r3, #20
 800230e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002310:	647a      	str	r2, [r7, #68]	; 0x44
 8002312:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002314:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002318:	e841 2300 	strex	r3, r2, [r1]
 800231c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800231e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002320:	2b00      	cmp	r3, #0
 8002322:	d1e5      	bne.n	80022f0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3314      	adds	r3, #20
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	e853 3f00 	ldrex	r3, [r3]
 8002332:	623b      	str	r3, [r7, #32]
   return(result);
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800233a:	663b      	str	r3, [r7, #96]	; 0x60
 800233c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	3314      	adds	r3, #20
 8002342:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002344:	633a      	str	r2, [r7, #48]	; 0x30
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002348:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800234a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234c:	e841 2300 	strex	r3, r2, [r1]
 8002350:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e5      	bne.n	8002324 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002364:	2b01      	cmp	r3, #1
 8002366:	d119      	bne.n	800239c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	330c      	adds	r3, #12
 800236e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	e853 3f00 	ldrex	r3, [r3]
 8002376:	60fb      	str	r3, [r7, #12]
   return(result);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f023 0310 	bic.w	r3, r3, #16
 800237e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002388:	61fa      	str	r2, [r7, #28]
 800238a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800238c:	69b9      	ldr	r1, [r7, #24]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	e841 2300 	strex	r3, r2, [r1]
 8002394:	617b      	str	r3, [r7, #20]
   return(result);
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e5      	bne.n	8002368 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800239c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d106      	bne.n	80023b2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80023a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023a8:	4619      	mov	r1, r3
 80023aa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80023ac:	f7ff ff69 	bl	8002282 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80023b0:	e002      	b.n	80023b8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80023b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80023b4:	f7fe f8e0 	bl	8000578 <HAL_UART_RxCpltCallback>
}
 80023b8:	bf00      	nop
 80023ba:	3770      	adds	r7, #112	; 0x70
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d108      	bne.n	80023e8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	b29b      	uxth	r3, r3
 80023de:	4619      	mov	r1, r3
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f7ff ff4e 	bl	8002282 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80023e6:	e002      	b.n	80023ee <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff ff36 	bl	800225a <HAL_UART_RxHalfCpltCallback>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	bf0c      	ite	eq
 8002416:	2301      	moveq	r3, #1
 8002418:	2300      	movne	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b21      	cmp	r3, #33	; 0x21
 8002428:	d108      	bne.n	800243c <UART_DMAError+0x46>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2200      	movs	r2, #0
 8002434:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002436:	68b8      	ldr	r0, [r7, #8]
 8002438:	f000 f8c2 	bl	80025c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	2b40      	cmp	r3, #64	; 0x40
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b22      	cmp	r3, #34	; 0x22
 800245c:	d108      	bne.n	8002470 <UART_DMAError+0x7a>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	2200      	movs	r2, #0
 8002468:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800246a:	68b8      	ldr	r0, [r7, #8]
 800246c:	f000 f8d0 	bl	8002610 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f043 0210 	orr.w	r2, r3, #16
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800247c:	68b8      	ldr	r0, [r7, #8]
 800247e:	f7ff fef6 	bl	800226e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002482:	bf00      	nop
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b098      	sub	sp, #96	; 0x60
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	88fa      	ldrh	r2, [r7, #6]
 80024a4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2222      	movs	r2, #34	; 0x22
 80024b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	4a3e      	ldr	r2, [pc, #248]	; (80025b4 <UART_Start_Receive_DMA+0x128>)
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	4a3d      	ldr	r2, [pc, #244]	; (80025b8 <UART_Start_Receive_DMA+0x12c>)
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c8:	4a3c      	ldr	r2, [pc, #240]	; (80025bc <UART_Start_Receive_DMA+0x130>)
 80024ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	2200      	movs	r2, #0
 80024d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3304      	adds	r3, #4
 80024e4:	4619      	mov	r1, r3
 80024e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	f7fe fdaa 	bl	8001044 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80024f0:	2300      	movs	r3, #0
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	330c      	adds	r3, #12
 8002514:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002518:	e853 3f00 	ldrex	r3, [r3]
 800251c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800251e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	65bb      	str	r3, [r7, #88]	; 0x58
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	330c      	adds	r3, #12
 800252c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800252e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002530:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002532:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002536:	e841 2300 	strex	r3, r2, [r1]
 800253a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800253c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1e5      	bne.n	800250e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3314      	adds	r3, #20
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	e853 3f00 	ldrex	r3, [r3]
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	657b      	str	r3, [r7, #84]	; 0x54
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3314      	adds	r3, #20
 8002560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002562:	63ba      	str	r2, [r7, #56]	; 0x38
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002566:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800256a:	e841 2300 	strex	r3, r2, [r1]
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1e5      	bne.n	8002542 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	3314      	adds	r3, #20
 800257c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	e853 3f00 	ldrex	r3, [r3]
 8002584:	617b      	str	r3, [r7, #20]
   return(result);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258c:	653b      	str	r3, [r7, #80]	; 0x50
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3314      	adds	r3, #20
 8002594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002596:	627a      	str	r2, [r7, #36]	; 0x24
 8002598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800259a:	6a39      	ldr	r1, [r7, #32]
 800259c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800259e:	e841 2300 	strex	r3, r2, [r1]
 80025a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1e5      	bne.n	8002576 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3760      	adds	r7, #96	; 0x60
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	0800229b 	.word	0x0800229b
 80025b8:	080023c1 	.word	0x080023c1
 80025bc:	080023f7 	.word	0x080023f7

080025c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	e853 3f00 	ldrex	r3, [r3]
 80025d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	330c      	adds	r3, #12
 80025e6:	69fa      	ldr	r2, [r7, #28]
 80025e8:	61ba      	str	r2, [r7, #24]
 80025ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ec:	6979      	ldr	r1, [r7, #20]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	e841 2300 	strex	r3, r2, [r1]
 80025f4:	613b      	str	r3, [r7, #16]
   return(result);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1e5      	bne.n	80025c8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002604:	bf00      	nop
 8002606:	3724      	adds	r7, #36	; 0x24
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002610:	b480      	push	{r7}
 8002612:	b095      	sub	sp, #84	; 0x54
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002622:	e853 3f00 	ldrex	r3, [r3]
 8002626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800262e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	330c      	adds	r3, #12
 8002636:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002638:	643a      	str	r2, [r7, #64]	; 0x40
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800263c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800263e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002640:	e841 2300 	strex	r3, r2, [r1]
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e5      	bne.n	8002618 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3314      	adds	r3, #20
 8002652:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	e853 3f00 	ldrex	r3, [r3]
 800265a:	61fb      	str	r3, [r7, #28]
   return(result);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	64bb      	str	r3, [r7, #72]	; 0x48
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3314      	adds	r3, #20
 800266a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800266c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800266e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002672:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e5      	bne.n	800264c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	2b01      	cmp	r3, #1
 8002686:	d119      	bne.n	80026bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	330c      	adds	r3, #12
 800268e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	e853 3f00 	ldrex	r3, [r3]
 8002696:	60bb      	str	r3, [r7, #8]
   return(result);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f023 0310 	bic.w	r3, r3, #16
 800269e:	647b      	str	r3, [r7, #68]	; 0x44
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026a8:	61ba      	str	r2, [r7, #24]
 80026aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ac:	6979      	ldr	r1, [r7, #20]
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	e841 2300 	strex	r3, r2, [r1]
 80026b4:	613b      	str	r3, [r7, #16]
   return(result);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e5      	bne.n	8002688 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80026ca:	bf00      	nop
 80026cc:	3754      	adds	r7, #84	; 0x54
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
	...

080026d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026dc:	b09f      	sub	sp, #124	; 0x7c
 80026de:	af00      	add	r7, sp, #0
 80026e0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ee:	68d9      	ldr	r1, [r3, #12]
 80026f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	ea40 0301 	orr.w	r3, r0, r1
 80026f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	431a      	orrs	r2, r3
 8002704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	431a      	orrs	r2, r3
 800270a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4313      	orrs	r3, r2
 8002710:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800271c:	f021 010c 	bic.w	r1, r1, #12
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002726:	430b      	orrs	r3, r1
 8002728:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800272a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002736:	6999      	ldr	r1, [r3, #24]
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	ea40 0301 	orr.w	r3, r0, r1
 8002740:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002742:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4bc5      	ldr	r3, [pc, #788]	; (8002a5c <UART_SetConfig+0x384>)
 8002748:	429a      	cmp	r2, r3
 800274a:	d004      	beq.n	8002756 <UART_SetConfig+0x7e>
 800274c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4bc3      	ldr	r3, [pc, #780]	; (8002a60 <UART_SetConfig+0x388>)
 8002752:	429a      	cmp	r2, r3
 8002754:	d103      	bne.n	800275e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002756:	f7ff fcef 	bl	8002138 <HAL_RCC_GetPCLK2Freq>
 800275a:	6778      	str	r0, [r7, #116]	; 0x74
 800275c:	e002      	b.n	8002764 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800275e:	f7ff fcd7 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 8002762:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800276c:	f040 80b6 	bne.w	80028dc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002772:	461c      	mov	r4, r3
 8002774:	f04f 0500 	mov.w	r5, #0
 8002778:	4622      	mov	r2, r4
 800277a:	462b      	mov	r3, r5
 800277c:	1891      	adds	r1, r2, r2
 800277e:	6439      	str	r1, [r7, #64]	; 0x40
 8002780:	415b      	adcs	r3, r3
 8002782:	647b      	str	r3, [r7, #68]	; 0x44
 8002784:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002788:	1912      	adds	r2, r2, r4
 800278a:	eb45 0303 	adc.w	r3, r5, r3
 800278e:	f04f 0000 	mov.w	r0, #0
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	00d9      	lsls	r1, r3, #3
 8002798:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800279c:	00d0      	lsls	r0, r2, #3
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	1911      	adds	r1, r2, r4
 80027a4:	6639      	str	r1, [r7, #96]	; 0x60
 80027a6:	416b      	adcs	r3, r5
 80027a8:	667b      	str	r3, [r7, #100]	; 0x64
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	461a      	mov	r2, r3
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	1891      	adds	r1, r2, r2
 80027b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80027b8:	415b      	adcs	r3, r3
 80027ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027c0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80027c4:	f7fd fd06 	bl	80001d4 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4ba5      	ldr	r3, [pc, #660]	; (8002a64 <UART_SetConfig+0x38c>)
 80027ce:	fba3 2302 	umull	r2, r3, r3, r2
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	011e      	lsls	r6, r3, #4
 80027d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d8:	461c      	mov	r4, r3
 80027da:	f04f 0500 	mov.w	r5, #0
 80027de:	4622      	mov	r2, r4
 80027e0:	462b      	mov	r3, r5
 80027e2:	1891      	adds	r1, r2, r2
 80027e4:	6339      	str	r1, [r7, #48]	; 0x30
 80027e6:	415b      	adcs	r3, r3
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
 80027ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80027ee:	1912      	adds	r2, r2, r4
 80027f0:	eb45 0303 	adc.w	r3, r5, r3
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	00d9      	lsls	r1, r3, #3
 80027fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002802:	00d0      	lsls	r0, r2, #3
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	1911      	adds	r1, r2, r4
 800280a:	65b9      	str	r1, [r7, #88]	; 0x58
 800280c:	416b      	adcs	r3, r5
 800280e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	461a      	mov	r2, r3
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	1891      	adds	r1, r2, r2
 800281c:	62b9      	str	r1, [r7, #40]	; 0x28
 800281e:	415b      	adcs	r3, r3
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002822:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002826:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800282a:	f7fd fcd3 	bl	80001d4 <__aeabi_uldivmod>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4b8c      	ldr	r3, [pc, #560]	; (8002a64 <UART_SetConfig+0x38c>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	2164      	movs	r1, #100	; 0x64
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	3332      	adds	r3, #50	; 0x32
 8002846:	4a87      	ldr	r2, [pc, #540]	; (8002a64 <UART_SetConfig+0x38c>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002854:	441e      	add	r6, r3
 8002856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002858:	4618      	mov	r0, r3
 800285a:	f04f 0100 	mov.w	r1, #0
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	1894      	adds	r4, r2, r2
 8002864:	623c      	str	r4, [r7, #32]
 8002866:	415b      	adcs	r3, r3
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800286e:	1812      	adds	r2, r2, r0
 8002870:	eb41 0303 	adc.w	r3, r1, r3
 8002874:	f04f 0400 	mov.w	r4, #0
 8002878:	f04f 0500 	mov.w	r5, #0
 800287c:	00dd      	lsls	r5, r3, #3
 800287e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002882:	00d4      	lsls	r4, r2, #3
 8002884:	4622      	mov	r2, r4
 8002886:	462b      	mov	r3, r5
 8002888:	1814      	adds	r4, r2, r0
 800288a:	653c      	str	r4, [r7, #80]	; 0x50
 800288c:	414b      	adcs	r3, r1
 800288e:	657b      	str	r3, [r7, #84]	; 0x54
 8002890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	461a      	mov	r2, r3
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	1891      	adds	r1, r2, r2
 800289c:	61b9      	str	r1, [r7, #24]
 800289e:	415b      	adcs	r3, r3
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028aa:	f7fd fc93 	bl	80001d4 <__aeabi_uldivmod>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4b6c      	ldr	r3, [pc, #432]	; (8002a64 <UART_SetConfig+0x38c>)
 80028b4:	fba3 1302 	umull	r1, r3, r3, r2
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	2164      	movs	r1, #100	; 0x64
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	3332      	adds	r3, #50	; 0x32
 80028c6:	4a67      	ldr	r2, [pc, #412]	; (8002a64 <UART_SetConfig+0x38c>)
 80028c8:	fba2 2303 	umull	r2, r3, r2, r3
 80028cc:	095b      	lsrs	r3, r3, #5
 80028ce:	f003 0207 	and.w	r2, r3, #7
 80028d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4432      	add	r2, r6
 80028d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028da:	e0b9      	b.n	8002a50 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028de:	461c      	mov	r4, r3
 80028e0:	f04f 0500 	mov.w	r5, #0
 80028e4:	4622      	mov	r2, r4
 80028e6:	462b      	mov	r3, r5
 80028e8:	1891      	adds	r1, r2, r2
 80028ea:	6139      	str	r1, [r7, #16]
 80028ec:	415b      	adcs	r3, r3
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80028f4:	1912      	adds	r2, r2, r4
 80028f6:	eb45 0303 	adc.w	r3, r5, r3
 80028fa:	f04f 0000 	mov.w	r0, #0
 80028fe:	f04f 0100 	mov.w	r1, #0
 8002902:	00d9      	lsls	r1, r3, #3
 8002904:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002908:	00d0      	lsls	r0, r2, #3
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	eb12 0804 	adds.w	r8, r2, r4
 8002912:	eb43 0905 	adc.w	r9, r3, r5
 8002916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4618      	mov	r0, r3
 800291c:	f04f 0100 	mov.w	r1, #0
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	008b      	lsls	r3, r1, #2
 800292a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800292e:	0082      	lsls	r2, r0, #2
 8002930:	4640      	mov	r0, r8
 8002932:	4649      	mov	r1, r9
 8002934:	f7fd fc4e 	bl	80001d4 <__aeabi_uldivmod>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <UART_SetConfig+0x38c>)
 800293e:	fba3 2302 	umull	r2, r3, r3, r2
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	011e      	lsls	r6, r3, #4
 8002946:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002948:	4618      	mov	r0, r3
 800294a:	f04f 0100 	mov.w	r1, #0
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	1894      	adds	r4, r2, r2
 8002954:	60bc      	str	r4, [r7, #8]
 8002956:	415b      	adcs	r3, r3
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800295e:	1812      	adds	r2, r2, r0
 8002960:	eb41 0303 	adc.w	r3, r1, r3
 8002964:	f04f 0400 	mov.w	r4, #0
 8002968:	f04f 0500 	mov.w	r5, #0
 800296c:	00dd      	lsls	r5, r3, #3
 800296e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002972:	00d4      	lsls	r4, r2, #3
 8002974:	4622      	mov	r2, r4
 8002976:	462b      	mov	r3, r5
 8002978:	1814      	adds	r4, r2, r0
 800297a:	64bc      	str	r4, [r7, #72]	; 0x48
 800297c:	414b      	adcs	r3, r1
 800297e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4618      	mov	r0, r3
 8002986:	f04f 0100 	mov.w	r1, #0
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	008b      	lsls	r3, r1, #2
 8002994:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002998:	0082      	lsls	r2, r0, #2
 800299a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800299e:	f7fd fc19 	bl	80001d4 <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <UART_SetConfig+0x38c>)
 80029a8:	fba3 1302 	umull	r1, r3, r3, r2
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	2164      	movs	r1, #100	; 0x64
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	3332      	adds	r3, #50	; 0x32
 80029ba:	4a2a      	ldr	r2, [pc, #168]	; (8002a64 <UART_SetConfig+0x38c>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c6:	441e      	add	r6, r3
 80029c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ca:	4618      	mov	r0, r3
 80029cc:	f04f 0100 	mov.w	r1, #0
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	1894      	adds	r4, r2, r2
 80029d6:	603c      	str	r4, [r7, #0]
 80029d8:	415b      	adcs	r3, r3
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029e0:	1812      	adds	r2, r2, r0
 80029e2:	eb41 0303 	adc.w	r3, r1, r3
 80029e6:	f04f 0400 	mov.w	r4, #0
 80029ea:	f04f 0500 	mov.w	r5, #0
 80029ee:	00dd      	lsls	r5, r3, #3
 80029f0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80029f4:	00d4      	lsls	r4, r2, #3
 80029f6:	4622      	mov	r2, r4
 80029f8:	462b      	mov	r3, r5
 80029fa:	eb12 0a00 	adds.w	sl, r2, r0
 80029fe:	eb43 0b01 	adc.w	fp, r3, r1
 8002a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f04f 0100 	mov.w	r1, #0
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	008b      	lsls	r3, r1, #2
 8002a16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a1a:	0082      	lsls	r2, r0, #2
 8002a1c:	4650      	mov	r0, sl
 8002a1e:	4659      	mov	r1, fp
 8002a20:	f7fd fbd8 	bl	80001d4 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <UART_SetConfig+0x38c>)
 8002a2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2164      	movs	r1, #100	; 0x64
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	3332      	adds	r3, #50	; 0x32
 8002a3c:	4a09      	ldr	r2, [pc, #36]	; (8002a64 <UART_SetConfig+0x38c>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	f003 020f 	and.w	r2, r3, #15
 8002a48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4432      	add	r2, r6
 8002a4e:	609a      	str	r2, [r3, #8]
}
 8002a50:	bf00      	nop
 8002a52:	377c      	adds	r7, #124	; 0x7c
 8002a54:	46bd      	mov	sp, r7
 8002a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40011000 	.word	0x40011000
 8002a60:	40011400 	.word	0x40011400
 8002a64:	51eb851f 	.word	0x51eb851f

08002a68 <__libc_init_array>:
 8002a68:	b570      	push	{r4, r5, r6, lr}
 8002a6a:	4d0d      	ldr	r5, [pc, #52]	; (8002aa0 <__libc_init_array+0x38>)
 8002a6c:	4c0d      	ldr	r4, [pc, #52]	; (8002aa4 <__libc_init_array+0x3c>)
 8002a6e:	1b64      	subs	r4, r4, r5
 8002a70:	10a4      	asrs	r4, r4, #2
 8002a72:	2600      	movs	r6, #0
 8002a74:	42a6      	cmp	r6, r4
 8002a76:	d109      	bne.n	8002a8c <__libc_init_array+0x24>
 8002a78:	4d0b      	ldr	r5, [pc, #44]	; (8002aa8 <__libc_init_array+0x40>)
 8002a7a:	4c0c      	ldr	r4, [pc, #48]	; (8002aac <__libc_init_array+0x44>)
 8002a7c:	f000 f820 	bl	8002ac0 <_init>
 8002a80:	1b64      	subs	r4, r4, r5
 8002a82:	10a4      	asrs	r4, r4, #2
 8002a84:	2600      	movs	r6, #0
 8002a86:	42a6      	cmp	r6, r4
 8002a88:	d105      	bne.n	8002a96 <__libc_init_array+0x2e>
 8002a8a:	bd70      	pop	{r4, r5, r6, pc}
 8002a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a90:	4798      	blx	r3
 8002a92:	3601      	adds	r6, #1
 8002a94:	e7ee      	b.n	8002a74 <__libc_init_array+0xc>
 8002a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a9a:	4798      	blx	r3
 8002a9c:	3601      	adds	r6, #1
 8002a9e:	e7f2      	b.n	8002a86 <__libc_init_array+0x1e>
 8002aa0:	08002b00 	.word	0x08002b00
 8002aa4:	08002b00 	.word	0x08002b00
 8002aa8:	08002b00 	.word	0x08002b00
 8002aac:	08002b04 	.word	0x08002b04

08002ab0 <memset>:
 8002ab0:	4402      	add	r2, r0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <memset+0xa>
 8002ab8:	4770      	bx	lr
 8002aba:	f803 1b01 	strb.w	r1, [r3], #1
 8002abe:	e7f9      	b.n	8002ab4 <memset+0x4>

08002ac0 <_init>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr

08002acc <_fini>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	bf00      	nop
 8002ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ad2:	bc08      	pop	{r3}
 8002ad4:	469e      	mov	lr, r3
 8002ad6:	4770      	bx	lr
